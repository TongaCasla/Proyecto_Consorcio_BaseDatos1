Triggers
Un trigger, también conocido como disparador es un conjunto de sentencias SQL las cuales se ejecutan de forma automática cuando ocurre algún evento que modifique a una tabla, no a una modificación de estructura, no a una modificación en cuando a los datos almacenados, es decir, hablamos de modicicación cuando se ejecute una sentencia INSERT, UPDATE o DELETE.
Algunas caracterí­sticas son:
1. Ejecución automática: Los triggers se activan automáticamente en respuesta a eventos en una tabla o vista, sin necesidad de que un usuario invoque su ejecución.
2. Eventos: Los triggers suelen asociarse a eventos específicos, como:
-INSERT: Se ejecuta cuando se inserta una fila en la tabla.
-UPDATE: Se ejecuta cuando se actualiza una fila en la tabla.
-DELETE: Se ejecuta cuando se elimina una fila de la tabla.
3. Propósitos
Auditoría: Registrar cambios realizados en los datos, como guardar el valor antiguo y nuevo de una fila en una tabla de auditoría.
Validación de datos: Asegurar que se cumplen ciertas reglas antes de que se complete una operación.
Automatización: Realizar automáticamente acciones relacionadas, como actualizar valores en otras tablas o realizar cálculos.
Restricciones de negocio: Evitar que se realicen ciertas acciones, como impedir que un usuario elimine registros de una tabla crítica.
4. Asociados a una tabla o vista: El trigger está vinculado a una tabla especí­fica (o a veces una vista), y se dispara cuando se realiza una acción sobre esa tabla.
Tabla que utilizamos:
Create table auditoria_gasto	(
						id_auditoria int identity (1,1),
						id_gasto int,
						id_consorcio int,
						id_localidad int,
						id_provincia int,
					    	fechapago datetime,					     
						importe decimal (8,2),
						usuario varchar (50),
						tipo varchar (50),
					    Constraint PK_idauditoria PRIMARY KEY (id_auditoria),
					)
Ejemplos de UPDATE: 
create TRIGGER TR_Gasto_cosorcio
	ON gasto FOR UPDATE
AS
	SET NOCOUNT ON 
	DECLARE @id_gasto INT = (SELECT idgasto FROM inserted)
	DECLARE @precio_nuevo DECIMAL (8,2) = (SELECT importe FROM inserted)
	DECLARE @precio_viejo DECIMAL (8,2) = (SELECT importe FROM deleted)
	--DECLARE @id_consorcio = (SELECT id_consorcio FROM deleted)
	INSERT INTO auditoria_gasto
		(id_gasto, id_consorcio, id_localidad, id_provincia, fechapago, importe, usuario, tipo)
	VALUES 
		(@id_gasto, 1, 1, 1, GETDATE(), @precio_nuevo ,SYSTEM_USER, 'Modificacion de los datos' ) 
GO
Ejemplos de  mensaje cuando no se puede realizar un DELETE: 
CREATE TRIGGER TRG_Prevent_Delete 
ON gasto
INSTEAD OF DELETE
AS
BEGIN
    RAISERROR ('No se permite la eliminaciÃ³n de registros en esta tabla.', 1, 1);
    ROLLBACK TRANSACTION;
END;
